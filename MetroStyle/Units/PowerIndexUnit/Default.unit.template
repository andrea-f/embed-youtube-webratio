#?delimiters [%, %], [%=, %]
<wr:LayoutParameter label="Show Header" name="show-header" type="boolean" default="true">
Defines the rendition of the header on the top.
Allowed values are: true (default) or false.
</wr:LayoutParameter>
<wr:LayoutParameter label="Use Alternate Rows" name="use-alternate" type="boolean" default="true">
Defines the usage of alternates colours for each line.
Allowed values are: true or false(default).
</wr:LayoutParameter>
<wr:LayoutParameter label="Compact table" name="compact" type="boolean" default="false">
Makes tables more compact by cutting cell padding in half.
</wr:LayoutParameter>
<wr:LayoutParameter label="Links Position" name="link-position" type="enum" values="left|right|on_row" default="right">
Defines the rendition of the sub levels links.
Allowed values are:
- right (default): places the links on the right
- left: places the links on the left
- on_row: places the first link on the attributes
</wr:LayoutParameter>
<wr:LayoutParameter label="Scrolling Position" name="scrolling-position" type="enum" values="top|bottom|both" default="bottom">
Defines where to position the scroll links.
Allowed values are:
- top (default): places the links at the top
- bottom: places the links at the bottom
- both: places the links at the top and bottom
</wr:LayoutParameter>
<wr:LayoutParameter label="Scrolling Alignment" name="scrolling-alignment" type="enum" values="left|center|right" default="center">
Defines the alignment of the scroll links.
Allowed values are:
- left (default)
- center
- right
</wr:LayoutParameter>
<wr:LayoutParameter label="Buttons Position" name="button-position" type="enum" values="top|bottom|both" default="bottom">
Defines where to position the buttons to render submit links.
Allowed values are:
- top: places the buttons at the top
- bottom (default): places the buttons at the bottom
- both: places the buttons at the top and bottom
</wr:LayoutParameter>
<wr:LayoutParameter label="Show Jump Links" name="show-jump-links" type="boolean" default="true">
Defines whether to show the jumps links of the scroller or not.
Allowed values are: true(default) or false.
</wr:LayoutParameter>
<wr:LayoutParameter label="Select All" name="select-all" type="boolean" values="true|false" default="false">
Defines the rendition of a link that allows
to select or deselect all the checkboxes of
the unit.
Allowed values are: true or false(default).
</wr:LayoutParameter>
<wr:LayoutParameter label="Hide checkboxes" name="hide-checkboxes" type="boolean" values="true|false" default="false">
Defines the visualization of the checkboxes in the unit.
Used only when the unit is "Checkable".
Allowed values are: true or false(default).
</wr:LayoutParameter>
<wr:LayoutParameter label="Use Empty Unit Message" name="use-empty-unit-message" type="boolean" default="false">
Defines the usage of a message for empty units.
Allowed values are: true(default) or false.
</wr:LayoutParameter>
<wr:LayoutParameter label="Empty Unit Message" name="empty-unit-message" type="string" default="emptyUnitMessage">
Defines the key of the message to use if the unit is empty.
Default value: emptyUnitMessage
</wr:LayoutParameter>

[%
import org.apache.commons.lang.StringUtils
import org.apache.commons.lang.math.NumberUtils

setHTMLOutput()

def unitId = unit["id"]
def blockFactor = unit["blockFactor"]
def isSortable = unit["sortable"]
def isScrollable = blockFactor != "" ? "true": "false"

def links = unit.selectNodes("layout:Link").findAll{it["_exp"]!='t'}
def unitLink = links.empty ? null : links[0]
def link = unitLink?.valueOf("@link")
def layoutId = getLayoutId(unit)

def showHeader = params["show-header"]
def useAlternate = params["use-alternate"]
def compact = params["compact"]
def linkPosition = params["link-position"]
def buttonPosition = params["button-position"]
def scrollingPosition = params["scrolling-position"]
def selectAll = params["select-all"]
def useEmptyUnitMessage = params["use-empty-unit-message"]
def emptyUnitMessage = params["empty-unit-message"]


def checkable = "true" == unit["checkable"] && "true" != unit["distinct"]

def hideCheckboxes = params["hide-checkboxes"]
def buttonsCount = unit.selectNodes("layout:Link").findAll{ isButton(it) }.size();

//returns true if the given link must be rendered as a form button
def isButton(link){
  def navLink = getById(link["link"])
  if(navLink == null){
    return false
  }
  def linkParams = navLink.selectNodes("LinkParameter").collect{it["source"]}
  if(linkParams.isEmpty()){
    linkParams = getAutomaticLinkParameters(navLink).collect{it["source"]}
  }
  for(param in linkParams){
    if(param?.endsWith("Checked")){
      return true;
    }
  }
  return false
}

def printPagination() { 
	def blockFactor = unit["blockFactor"]
	def scrollingAlignment = "text-" + params["scrolling-alignment"]
	def showJumpLinks = params["show-jump-links"]
	def firstLink = unit.selectSingleNode("layout:Link[contains(@link,'First')]")
	def previousLink = unit.selectSingleNode("layout:Link[contains(@link,'Previous')]")
	def blockLink = unit.selectSingleNode("layout:Link[contains(@link,'Block')]")
	def nextLink = unit.selectSingleNode("layout:Link[contains(@link,'Next')]")
	def lastLink = unit.selectSingleNode("layout:Link[contains(@link,'Last')]")
%]
	<c:if test="${<wr:Id context="unit"/>.scroller.of gt [%= blockFactor %]}">
	   <div class="[%= scrollingAlignment %]">
	   <ul class="pagination">
			[% if (firstLink) { %]
		        <c:choose>
		            <c:when test="${<wr:Id context="unit"/>.scroller.current ne <wr:Id context="unit"/>.scroller.first}">
	     	            <li><wr:Link class="scroll" context="firstLink"/></li>
		            </c:when>
		            <c:otherwise>
	     	            <li class="disabled" ><wr:Link class="scroll" context="firstLink"/></li>
	           		</c:otherwise>
		        </c:choose>
		    [% } %]
		    [% if (previousLink) { %]
		        <c:choose>
	                <c:when test="${<wr:Id context="unit"/>.scroller.current ne <wr:Id context="unit"/>.scroller.previous}">
	     	            <li><wr:Link class="scroll" context="previousLink"/></li>
	                </c:when>
	                <c:otherwise>
	     	            <li class="disabled" ><wr:Link class="scroll" context="previousLink"/></li>
		           	</c:otherwise>
	            </c:choose>
		    [% } %]
		   [% if (showJumpLinks == "true" && blockLink) {%]
		    <c:forEach var="current" varStatus="status" items="${<wr:Id context="unit"/>.scroller.blocks}">
		      <c:set var="index" value="${status.index}"/>
		      <c:choose>
		        <c:when test="${current ne <wr:Id context="unit"/>.scroller.current}">
     	            <li><a class="<wr:StyleClass context="blockLink"/> link" href="<wr:URL context="blockLink"/>"  onclick="<wr:AjaxURL context="blockLink" />">${current}</a></li>
		        </c:when>
		        <c:otherwise>
     	            <li class="active" ><span class="<wr:StyleClass context="blockLink"/> link">${current} <span class="sr-only">(current)</span></span></li>
		        </c:otherwise>
		      </c:choose>
	    	</c:forEach> 
		    [% } %]
		    [% if (nextLink) { %]
		        <c:choose>
	                <c:when test="${<wr:Id context="unit"/>.scroller.current ne <wr:Id context="unit"/>.scroller.next}">
	     	            <li><wr:Link class="scroll" context="nextLink"/></li>
		            </c:when>
    	            <c:otherwise>
	     	            <li class="disabled" ><wr:Link class="scroll" context="nextLink"/></li>
    	            </c:otherwise>
    	        </c:choose>
		    [% } %]
		    [% if (lastLink) { %]
		    	<c:choose>
		            <c:when test="${<wr:Id context="unit"/>.scroller.current ne <wr:Id context="unit"/>.scroller.last}">
	     	            <li><wr:Link class="scroll" context="lastLink"/></li>
	                </c:when>
	                <c:otherwise>
	     	            <li class="disabled" ><wr:Link class="scroll" context="lastLink"/></li>
	               </c:otherwise>
	            </c:choose>
		    [% } %]
	    </ul>
	    </div>
	</c:if>
[% } %]
[% if (useEmptyUnitMessage != "true") { %]
<c:if test="${not(empty <wr:Id context="unit"/>) and (<wr:Id context="unit"/>.dataSize gt 0)}">
[% } else { %]
<c:choose>
<c:when test="${not(empty <wr:Id context="unit"/>) and (<wr:Id context="unit"/>.dataSize gt 0)}">
[% } %]
	<wr:Frame>
		<div class="plain <wr:StyleClass/>">
			<div class="plain PowerIndexUnit">
				[% if (checkable) { %]
					<c:set var="btFieldError"><html:errors property="<wr:Id context="unit"/>Checked"/></c:set>
					<c:if test="${not (empty btFieldError)}">
						<div class="alert alert-danger alert-dismissable">
							<button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
							<html:errors property="<wr:Id context="unit"/>Checked"/>
						</div>
					</c:if>
					[% if (buttonPosition == "top" || buttonPosition == "both") { %]
						<div class="btn-toolbar">
							<wr:Iterate var="l" context="unit" select="layout:Link">
								[% if (isButton(l)) { %]
									<wr:Link class="btn" type="button" context="l"/>
								[% } %]
							</wr:Iterate>
						</div>
					[% } %]
				[% } %]
				[% if (isScrollable == "true" && (scrollingPosition == "top" || scrollingPosition == "both")) { %]
					[% printPagination() %]
				[% } %]
				<div class="table-responsive">
				<table class="table table-bordered table-hover [% if (compact == "true") { %] table-condensed[% } %][% if (useAlternate == "true") { %] table-striped[% } %] [% if(hideCheckboxes == "true"){ %]hidden-checks[% } %]">
					[% if (showHeader == "true") {%]
					<thead>
						<tr>
						[% if (checkable) {%]
								<th scope="col" class="<wr:StyleClass/> smallcol [% if(hideCheckboxes == "true"){ %]hidden[% } %]">
								[% if (selectAll == "true") {%]
									<script>multiChoiceMap["[%= layoutId%]"] = "all";</script>
									<div class="checkbox">
										<input type="checkbox" onclick="toggleCheckboxes('[%= layoutId%]', 'Checked')" id="[%= layoutId%]SelectAll" class="selectAll"/>
									</div>
									<label class="sr-only" for="[%= layoutId%]SelectAll">Select all rows</label>
								[% } %]
								</th>
						[%}%]
						[% if (linkPosition == "left") { %]
							<wr:Iterate var="l" context="unit" select="layout:Link[string(@_exp) != 't']">
								[% if (!isButton(l)) { %]
									<wr:Visible><th scope="col" class="<wr:StyleClass/> smallcol"></th></wr:Visible>
								[% } %]
							</wr:Iterate>
						[% }  %]
						<wr:Iterate var="att" context="unit" select="layout:Attribute">
						<wr:Visible>
					        <th scope="col" class="<wr:StyleClass/>">
					        [% if (isSortable == "true") { %]
					         [% def sortLink = unit.selectSingleNode("layout:Link[@link='" + unit["id"] + att["attribute"] + "']")
						         if(sortLink != null) { %]
						            <wr:Link context="sortLink" class="sort" type="sort"/>
						         [% } else { %]
						            <wr:Label/>
						         [% } %]
						     [% } else { %]
						     	<wr:Label/>
						     [% } %]
					        </th>
					    </wr:Visible>
					    </wr:Iterate>
						<wr:Iterate var="l" context="unit" select="layout:Link[string(@_exp) != 't']">
							[% if (!isButton(l) && (linkPosition == "right" || ((linkPosition == "on_row") && index > 0))) { %]
								<wr:Visible><th scope="col" class="<wr:StyleClass/> smallcol"></th></wr:Visible>
							[% } %]
						</wr:Iterate>	
						</tr>
					</thead>
					[% } %]
				<tbody>
				<c:forEach var="current" varStatus="status" items="${<wr:Id context="unit"/>.data}">
					<c:set var="index" value="${status.index}"/>	
						<tr <c:if test="${<wr:Id context="unit"/>.currentIndex eq index}">class="info"</c:if>>	
						[% if (checkable) {%]
							<td class="<wr:StyleClass/> smallcol [% if(hideCheckboxes == "true"){ %]hidden[% } %]">
							    <div class="checkbox">
							    	<html:multibox styleId="[%= layoutId%]_${index}" property="<wr:Id context="unit"/>Checked" styleClass="checkBox"><c:out value="${<wr:Id context="unit"/>.key[index]}"/></html:multibox>
							    </div>
							    <label class="sr-only" for="[%= layoutId%]_${index}">Select row</label>
							</td>
						[%}%]
						
							[% if (linkPosition == "left") { %]
								<wr:Iterate var="l" context="unit" select="layout:Link[string(@_exp) != 't']">
									[% if (!isButton(l)) { %]
									<wr:Visible>
										<td class="<wr:StyleClass/> smallcol">
											<wr:Link/>
										</td>
									</wr:Visible>
							    	[% } %]
								</wr:Iterate>
							[% } %]
							<wr:Iterate var="attr" context="unit" select="layout:Attribute">
								<wr:Visible>
								<td class="<wr:StyleClass/> [%=attr["type"]%]">
								[% if ((linkPosition == "on_row") && (!links.empty)) {%]
									<wr:Visible position="'index'">
										<wr:Visible context="unitLink" position="'index'">
											<a href="<wr:URL context="unitLink"/>" class="<wr:StyleClass context="unitLink"/>" onclick="<wr:AjaxURL context="unitLink" />">
										</wr:Visible>
										<wr:Value/>
										<wr:Visible context="unitLink" position="'index'">
											</a>
										</wr:Visible>
									</wr:Visible>
								[% } else {%]
										<wr:Value/>
								[% } %]
								</td>
								</wr:Visible>
							</wr:Iterate>
						    <wr:Iterate var="l" context="unit" select="layout:Link[string(@_exp) != 't']">
							[% if (!isButton(l)) { %]
							   	[% if ((linkPosition == "on_row") && index > 0) { %]
							   	<wr:Visible>
							   		<td class="<wr:StyleClass/> smallcol">
										<wr:Link/>
									</td>
								</wr:Visible>
								[% } else if (linkPosition != "on_row" && linkPosition != "left") {%]
								<wr:Visible>
									<td class="<wr:StyleClass/> smallcol">
										<wr:Link/>
									</td>
								</wr:Visible>
								[% } %]
							[% } %]
						   </wr:Iterate>
						</tr>
					</c:forEach>
					</tbody>
				</table>
				</div>
				[% if (isScrollable == "true" && (scrollingPosition == "bottom" || scrollingPosition == "both")) { %]
					[% printPagination() %]
				[% } %]
				[% if (checkable && (buttonPosition == "bottom" || buttonPosition == "both")) { %]
					<div class="btn-toolbar">
						<wr:Iterate var="l" context="unit" select="layout:Link">
							[% if (isButton(l)) { %]
								<wr:Link class="btn" type="button" context="l"/>
							[% } %]
						</wr:Iterate>
					</div>
				[% } %]
			</div>
		</div>
	</wr:Frame>
[% if (useEmptyUnitMessage != "true") { %]
</c:if>
[% } else { %]
</c:when>
<c:otherwise>
	<wr:Frame>
		<div class="alert alert-info empty-message <wr:StyleClass/>">
			<bean:message key="[%printJSPTagValue(emptyUnitMessage)%]"/>
		</div>
	</wr:Frame>
</c:otherwise>
</c:choose>
[% } %]